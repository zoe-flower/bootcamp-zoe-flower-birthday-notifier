package httpservice

import (
	"net/http"

	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/flypay/events/pkg/bootcamp"
	"github.com/flypay/go-kit/v4/pkg/eventbus"
	"github.com/flypay/go-kit/v4/pkg/log"
	"github.com/labstack/echo/v4"

	"github.com/flypay/go-kit/v4/pkg/projections"
)

type HTTPHandler struct {
	Logger            log.Logger
	Producer          eventbus.Producer
	CompositeDatabase projections.CompositeReadWriter
	DefaultDatabase   projections.ReadWriter
}

type BirthdayRecordProjection struct {
	Identifier string // Date field
	Range      string // ID
}

// TO FINISH: context.Context over echo.Context???

// GetUsersWithBirthdayToday is a handler function which creates a BirthdayRecordProjection for db data to be matched and returned to.
// It creates a BirthdayRecord as per the the autogenerated services structure (ASK).
// For each record in the BirthdayRecordProjection, the method somewhat pointlessly adds the data to a new httpResponse variable
// In the loop it also Emits an event for every individual bit of data
func (h HTTPHandler) GetUsersWithBirthdayToday(ctx echo.Context, params GetUsersWithBirthdayTodayParams) error {
	var todayBirthdays []BirthdayRecordProjection
	err := h.CompositeDatabase.ReadComposite(ctx.Request().Context(), params.Date, &dynamodb.Condition{}, &todayBirthdays)
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, err.Error())
	}
	var httpResponse []BirthdayRecord
	for _, todayBirthday := range todayBirthdays {
		httpResponse = append(httpResponse, BirthdayRecord{Id: todayBirthday.Range})
		event := bootcamp.BirthdayToday{
			User: todayBirthday.Range,
		}
		err := h.Producer.Emit(ctx.Request().Context(), &event)
		if err != nil {
			h.Logger.Errorf("failed to bind user create request: %s", err)
			return echo.NewHTTPError(http.StatusInternalServerError)
		}
		h.Logger.Debugf("Have emitted: %v", event.User)
	}
	return ctx.JSON(http.StatusAccepted, httpResponse)
}
